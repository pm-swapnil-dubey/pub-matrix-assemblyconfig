//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.06.25 at 12:27:50 AM EDT 
//


package matrix.assemblyconfig.generic.config.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


import org.apache.commons.lang3.ArrayUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://matrix.pubmatic.com/matrix/reports}simpleDimensions"/>
 *         &lt;element ref="{http://matrix.pubmatic.com/matrix/reports}derviedFromJoinDimensions"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "simpleDimensions",
    "derivedFromJoinDimensions",
    "derivedFromOtherDimensions"
})
@XmlRootElement(name = "dimensions")
public class Dimensions implements Serializable{

    @XmlElement(required = true)
    protected SimpleDimensions simpleDimensions;
    @XmlElement(required = true)
    protected DerivedFromJoinDimensions derivedFromJoinDimensions;
    @XmlElement(required = true)
    protected DerivedFromOtherDimensions derivedFromOtherDimensions;


    /**
     * Gets the value of the simpleDimensions property.
     * 
     * @return
     *     possible object is
     *     {@link SimpleDimensions }
     *     
     */
    public SimpleDimensions getSimpleDimensions() {
        return simpleDimensions;
    }

    /**
     * Sets the value of the simpleDimensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link SimpleDimensions }
     *     
     */
    public void setSimpleDimensions(SimpleDimensions value) {
        this.simpleDimensions = value;
    }

    /**
     * Gets the value of the derviedFromJoinDimensions property.
     * 
     * @return
     *     possible object is
     *     {@link DerivedFromJoinDimensions }
     *     
     */
    public DerivedFromJoinDimensions getDerivedFromJoinDimensions() {
        return derivedFromJoinDimensions;
    }

    /**
     * Sets the value of the derviedFromJoinDimensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link DerivedFromJoinDimensions }
     *     
     */
    public void setDerivedFromJoinDimensions(DerivedFromJoinDimensions value) {
        this.derivedFromJoinDimensions = value;
    }
    
    /**
     * Gets the value of the derivedFromOtherDimensions property.
     * 
     * @return
     *     possible object is
     *     {@link DerivedFromOtherDimensions }
     *     
     */
    public DerivedFromOtherDimensions getDerivedFromOtherDimensions() {
        return derivedFromOtherDimensions;
    }

    /**
     * Sets the value of the derivedFromOtherDimensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link DerivedFromOtherDimensions }
     *     
     */
    public void setDerivedFromOtherDimensions(DerivedFromOtherDimensions value) {
        this.derivedFromOtherDimensions = value;
    }
    
    public String[] getFinalDimensionNames(){
      List<String> finalDimensions = new ArrayList<>();
      for(int i=0; i<simpleDimensions.simpleDimension.size() ;i++){
        SimpleDimension dimension = simpleDimensions.simpleDimension.get(i);
        if(!dimension.isExclude()){
          finalDimensions.add(dimension.getName());
        }
      }
      if(null!=derivedFromJoinDimensions.derivedFromJoinDimension) {
        for(int i=0; i<derivedFromJoinDimensions.derivedFromJoinDimension.size(); i++){
          DerivedFromJoinDimension dimension = derivedFromJoinDimensions.derivedFromJoinDimension.get(i);
          finalDimensions.add(dimension.getName());
        }
      }
      for(int i=0; i<derivedFromOtherDimensions.derivedFromOtherDimension.size(); i++){
        DerivedFromOtherDimension dimension = derivedFromOtherDimensions.derivedFromOtherDimension.get(i);
        finalDimensions.add(dimension.getName());
      }
      
      return Arrays.copyOf(finalDimensions.toArray(), finalDimensions.size(), String[].class);
    }
    
    public String[] getFinalDimensionsWithGroupKey(){
      return ArrayUtils.addAll(new String[]{"group_key"}, getFinalDimensionNames());
    }

    /**
     * Gets name of cubic fields
     * @return
     */
    /*public List<String> getCubicFields(){
      List<String> cubicFields = new ArrayList<>();
      cubicFields.addAll(simpleDimensions.getCubicFields());
      cubicFields.addAll(derivedFromJoinDimensions.getCubicFields());
      cubicFields.addAll(derivedFromOtherDimensions.getCubicFields());
      return cubicFields;
    }
    
    
    public Map<String, FieldType> getCubicFieldAndTypeMap(){
      Map<String, FieldType> cubicFieldTypeMap = new HashMap<String, FieldType>();
      cubicFieldTypeMap.putAll(simpleDimensions.getCubicFieldAndTypeMap());
      cubicFieldTypeMap.putAll(derivedFromJoinDimensions.getCubicFieldAndTypeMap());
      cubicFieldTypeMap.putAll(derivedFromOtherDimensions.getCubicFieldAndTypeMap());
      return cubicFieldTypeMap;
    }*/
    
    public Map<String, FieldType> getFieldAndTypeMap(){
      Map<String, FieldType> fieldTypeMap = new HashMap<String, FieldType>();
      fieldTypeMap.putAll(simpleDimensions.getFieldAndTypeMap());
      fieldTypeMap.putAll(derivedFromJoinDimensions.getFieldAndTypeMap());
      fieldTypeMap.putAll(derivedFromOtherDimensions.getFieldAndTypeMap());
      return fieldTypeMap;
    }
    
    
    /**
     * Gets position of cubic fields in given field array
     * @param fields
     * @return
     */
    /*public List<Integer> getCubicFieldPositions(String[] fields){
      List<String> cubicFields = getCubicFields();
      List<Integer> cubicFieldPositions = new ArrayList<>();
      for(int i=0;i<fields.length;i++){
        String field = fields[i];
        if(cubicFields.contains(field)){
          cubicFieldPositions.add(i);
        }
      }
      return cubicFieldPositions;
    }
    
    public Map<Integer, FieldType> getCubicFieldPositionAndTypeMap(String[] fields){
      Map<String, FieldType> cubicFieldAndTypeMap = getCubicFieldAndTypeMap();
      Map<Integer, FieldType> cubicFieldPositionAndTypeMap = new HashMap<>();
      for(int i=0;i<fields.length;i++){
        String field = fields[i];
        if(cubicFieldAndTypeMap.containsKey(field)){
          cubicFieldPositionAndTypeMap.put(i, cubicFieldAndTypeMap.get(field));
        }
      }
      return cubicFieldPositionAndTypeMap;
    }
    
    public boolean hasCubicFields(){
      return !getCubicFields().isEmpty();
    }*/
    
}
