//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.06.25 at 12:27:50 AM EDT 
//


package matrix.assemblyconfig.generic.config.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.apache.commons.lang3.ArrayUtils;

import matrix.assemblyconfig.util.Util;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://matrix.pubmatic.com/matrix/reports}dimensions"/>
 *         &lt;element ref="{http://matrix.pubmatic.com/matrix/reports}metrics"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "dimensions",
    "metrics",
    "extractorDimensionSequences"
})
@XmlRootElement(name = "assemblyFields")
public class AssemblyFields implements Serializable{

    @XmlElement(required = true)
    protected Dimensions dimensions;
    @XmlElement(required = true)
    protected Metrics metrics;
    @XmlElement(required = true)
    protected ExtractorDimensionSequences extractorDimensionSequences;
    
    /**
     * Gets the value of the dimensions property.
     * 
     * @return
     *     possible object is
     *     {@link Dimensions }
     *     
     */
    public Dimensions getDimensions() {
        return dimensions;
    }

    /**
     * Sets the value of the dimensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link Dimensions }
     *     
     */
    public void setDimensions(Dimensions value) {
        this.dimensions = value;
    }

    /**
     * Gets the value of the metrics property.
     * 
     * @return
     *     possible object is
     *     {@link Metrics }
     *     
     */
    public Metrics getMetrics() {
        return metrics;
    }

    /**
     * Sets the value of the metrics property.
     * 
     * @param value
     *     allowed object is
     *     {@link Metrics }
     *     
     */
    public void setMetrics(Metrics value) {
        this.metrics = value;
    }

    public ExtractorDimensionSequences getExtractorDimensionSequences() {
      return this.extractorDimensionSequences;
    }
    
//    public DimensionSequences getDimensionSequences(String extractorType) {
//      for (DimensionSequences dimensionSequences : extractorDimensionSequences.getDimensionSequences()) {
//        if(dimensionSequences.getType().contains(extractorType)) {
//          return dimensionSequences;
//        }
//      }
//      return null;
//    }

    public String[] getSimpleDimensionsAndMetricsNames(){
      String[] fieldNames = ArrayUtils.addAll(dimensions.getSimpleDimensions().getDimensionNames(), metrics.simpleMetrics.getMetricNames());
      return fieldNames;
    }
    
    public List getSimpleDimensionsAndMetricsClassObjects(){
      List fieldExtractors = new ArrayList<>();
      try {
        for (SimpleDimension dimension : dimensions.getSimpleDimensions().getSimpleDimension()) {
          fieldExtractors.add(Util.createInstance(dimension.getClassName()));
        }
        for (SimpleMetric metric : metrics.getSimpleMetrics().getSimpleMetric()) {
          fieldExtractors.add(Util.createInstance(metric.getClassName()));
        }
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
      return fieldExtractors;
    }

    public Map<String, String> getSimpleDimensionsAndMetricsClassNameMap(){
      Map<String,String> fieldClassMap = new HashMap<>();
      try {
        for (SimpleDimension dimension : dimensions.getSimpleDimensions().getSimpleDimension()) {
          fieldClassMap.put(dimension.getName(), dimension.getClassName());
        }
        for (SimpleMetric metric : metrics.getSimpleMetrics().getSimpleMetric()) {
          fieldClassMap.put(metric.getName(), metric.getClassName());
        }
        fieldClassMap.put("non_applicable_int", "matrix.aggregation.generic.field.simple.dimension.NonApplicableInt");
        fieldClassMap.put("non_applicable_str", "matrix.aggregation.generic.field.simple.dimension.NonApplicableStr");
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
      return fieldClassMap;
    }
    
//    public List<List> getDefaultListOfSimpleDimensionsAndMetricsClassObjects(String extractorType){
//      DimensionSequences dimensionSequences=getDimensionSequences(extractorType);
//      List<List> fieldExtractorsList=new ArrayList<>();
//      Map<String, String> fieldClassMap=getSimpleDimensionsAndMetricsClassNameMap();
//      try {
//        for (DimensionSequence  dimensionSequence : dimensionSequences.getDimensionSequences()) {
//          if(dimensionSequence.getIsDefaultSeq()) {
//            List currentExtractorList = new ArrayList<>();
//            for (String dimensionName : dimensionSequence.getName()) {
//              currentExtractorList.add(Util.createInstance(fieldClassMap.get(dimensionName).trim()));
//            }
//            for (SimpleMetric metric : metrics.getSimpleMetrics().getSimpleMetric()) {
//              currentExtractorList.add(Util.createInstance(metric.getClassName().trim()));
//            }
//            fieldExtractorsList.add(currentExtractorList);
//          }
//        }
//      } catch (Exception e) {
//        throw new RuntimeException(e);
//      }
//      return fieldExtractorsList;
//    }
    
    public List getSimpleDimensionsClassObjects(){
      List fieldExtractors = new ArrayList<>();
      try {
        for (SimpleDimension dimension : dimensions.getSimpleDimensions().getSimpleDimension()) {
          fieldExtractors.add(Util.createInstance(dimension.getClassName()));
        }
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
      return fieldExtractors;
    }
    
    public String[] getFinalDimensionsAndSimpleMetrics(){
      return ArrayUtils.addAll(dimensions.getFinalDimensionNames(), metrics.getSimpleMetrics().getMetricNames());
    }
    
    public String[] getFinalFieldNames() {
      String finalFieldNames[] = ArrayUtils.addAll(getDimensions().getFinalDimensionNames(), 
          getMetrics().getSimpleMetrics().getMetricNames());
      finalFieldNames = ArrayUtils.addAll(finalFieldNames,  getMetrics().getDerivedFromOtherMetrics().getDerivedMetricNames());
      return finalFieldNames;
    }
}
